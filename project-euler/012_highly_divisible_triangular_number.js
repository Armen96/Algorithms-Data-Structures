/**
 * Highly divisible triangular number
 *
 * The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 *
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *
 * Let us list the factors of the first seven triangle numbers:
 *
 *  1: 1
 *  3: 1,3
 *  6: 1,2,3,6
 * 10: 1,2,5,10
 * 15: 1,3,5,15
 * 21: 1,3,7,21
 * 28: 1,2,4,7,14,28
 * We can see that 28 is the first triangle number to have over five divisors.
 *
 * What is the value of the first triangle number to have over five hundred divisors?
 */


console.time();
// function solution() {
//     const targetDivisorsCount = 500; // 500;
//     let divisorsCount = 1;
//     let lastTriangleNumber = 1;
//
//     let j = 2;
//     while (divisorsCount < targetDivisorsCount) {
//         divisorsCount = 1;
//         lastTriangleNumber = lastTriangleNumber + j;
//
//         for (let i = 1; i <= Math.ceil(lastTriangleNumber / 2); i++) {
//             if (lastTriangleNumber %i === 0) {
//                 divisorsCount += 1;
//             }
//         }
//
//         console.log(lastTriangleNumber);
//         j++;
//     }
//
//
//     return lastTriangleNumber;
// } // time 8m

function solution() {
    const targetDivisorsCount = 500; // 500;
    let divisorsCount = 1;
    let lastTriangleNumber = 1;

    let j = 2;
    while (divisorsCount < targetDivisorsCount) {
        divisorsCount = 1;
        lastTriangleNumber = lastTriangleNumber + j;

        for (let i = 1; i <= Math.ceil(Math.sqrt(lastTriangleNumber)); i++) {
            if (lastTriangleNumber %i === 0) {
                divisorsCount += 2; // by 2 because example if 100 / 20 then 100 divides 5, so basically we can divide till sqrt num
            }
        }

        j++;
    }

    return lastTriangleNumber;
}

console.log(solution()); // 76576500
console.timeEnd(); // time 600ms
